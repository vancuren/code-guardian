import * as vscode from 'vscode';
import { Vulnerability } from '../types';

export class VulnerabilityPanel {
    private panel: vscode.WebviewPanel | undefined;
    private vulnerabilities: Map<string, Vulnerability[]> = new Map();

    constructor(private readonly extensionUri: vscode.Uri) {}

    public show() {
        if (this.panel) {
            this.panel.reveal();
        } else {
            this.createPanel();
        }
        this.updateWebview();
    }

    public updateVulnerabilities(file: string, vulnerabilities: Vulnerability[]) {
        this.vulnerabilities.set(file, vulnerabilities);
        if (this.panel) {
            this.updateWebview();
        }
    }

    private createPanel() {
        this.panel = vscode.window.createWebviewPanel(
            'pentari.vulnerabilities',
            'Pentari - Security Analysis',
            vscode.ViewColumn.Two,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );

        this.panel.onDidDispose(() => {
            this.panel = undefined;
        });

        this.panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'applyFix':
                        await this.applyFix(message.file, message.vulnerability, message.fix);
                        break;
                    case 'openFile':
                        await this.openFile(message.file, message.line);
                        break;
                    case 'ignoreSuggestion':
                        this.ignoreSuggestion(message.file, message.vulnerability);
                        break;
                }
            }
        );
    }

    private async applyFix(file: string, vulnerability: Vulnerability, fix: string) {
        const document = await vscode.workspace.openTextDocument(file);
        const startPos = new vscode.Position(vulnerability.line - 1, 0);
        const endPos = new vscode.Position(vulnerability.line, 0);
        const range = new vscode.Range(startPos, endPos);

        await vscode.commands.executeCommand('pentari.applyFix', document, range, fix);
    }

    private async openFile(file: string, line: number) {
        const document = await vscode.workspace.openTextDocument(file);
        const editor = await vscode.window.showTextDocument(document);
        const position = new vscode.Position(line - 1, 0);
        editor.selection = new vscode.Selection(position, position);
        editor.revealRange(new vscode.Range(position, position));
    }

    private ignoreSuggestion(file: string, vulnerability: Vulnerability) {
        const fileVulns = this.vulnerabilities.get(file) || [];
        const filtered = fileVulns.filter(v =>
            v.line !== vulnerability.line || v.message !== vulnerability.message
        );
        this.vulnerabilities.set(file, filtered);
        this.updateWebview();
    }

    private updateWebview() {
        if (!this.panel) {
            return;
        }

        this.panel.webview.html = this.getWebviewContent();
    }

    private getWebviewContent(): string {
        const allVulnerabilities: Array<{ file: string; vulnerabilities: Vulnerability[] }> = [];

        this.vulnerabilities.forEach((vulns, file) => {
            if (vulns.length > 0) {
                allVulnerabilities.push({ file, vulnerabilities: vulns });
            }
        });

        const criticalCount = this.countBySeverity('critical');
        const highCount = this.countBySeverity('high');
        const mediumCount = this.countBySeverity('medium');
        const lowCount = this.countBySeverity('low');

        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pentari</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            padding: 20px;
            background: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
        }

        h1 {
            display: flex;
            align-items: center;
            gap: 10px;
            border-bottom: 2px solid var(--vscode-panel-border);
            padding-bottom: 10px;
        }

        .shield-icon {
            width: 30px;
            height: 30px;
        }

        .summary {
            display: flex;
            gap: 20px;
            margin: 20px 0;
            padding: 15px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 8px;
        }

        .summary-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .severity-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
            font-size: 12px;
        }

        .critical { background: #d73a49; color: white; }
        .high { background: #e36209; color: white; }
        .medium { background: #f9c513; color: black; }
        .low { background: #28a745; color: white; }

        .file-section {
            margin: 20px 0;
            border: 1px solid var(--vscode-panel-border);
            border-radius: 8px;
            overflow: hidden;
        }

        .file-header {
            padding: 10px 15px;
            background: var(--vscode-editor-selectionBackground);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .file-header:hover {
            background: var(--vscode-editor-hoverHighlightBackground);
        }

        .vulnerability-list {
            padding: 0;
        }

        .vulnerability-item {
            padding: 15px;
            border-bottom: 1px solid var(--vscode-panel-border);
        }

        .vulnerability-item:last-child {
            border-bottom: none;
        }

        .vulnerability-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .vulnerability-message {
            margin: 10px 0;
            font-size: 14px;
        }

        .vulnerability-details {
            display: flex;
            gap: 15px;
            font-size: 12px;
            color: var(--vscode-descriptionForeground);
            margin: 10px 0;
        }

        .suggestion {
            background: var(--vscode-textBlockQuote-background);
            border-left: 3px solid var(--vscode-textLink-foreground);
            padding: 10px;
            margin: 10px 0;
            font-size: 13px;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        button {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
        }

        button:hover {
            background: var(--vscode-button-hoverBackground);
        }

        button.secondary {
            background: var(--vscode-button-secondaryBackground);
            color: var(--vscode-button-secondaryForeground);
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--vscode-descriptionForeground);
        }

        .collapsible {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .collapsible.expanded {
            max-height: 2000px;
        }
    </style>
</head>
<body>
    <h1>
        <span class="shield-icon">üõ°Ô∏è</span>
        Pentari Security Analysis
    </h1>

    <div class="summary">
        <div class="summary-item">
            <span class="severity-badge critical">${criticalCount}</span>
            <span>Critical</span>
        </div>
        <div class="summary-item">
            <span class="severity-badge high">${highCount}</span>
            <span>High</span>
        </div>
        <div class="summary-item">
            <span class="severity-badge medium">${mediumCount}</span>
            <span>Medium</span>
        </div>
        <div class="summary-item">
            <span class="severity-badge low">${lowCount}</span>
            <span>Low</span>
        </div>
    </div>

    ${allVulnerabilities.length === 0 ? `
        <div class="empty-state">
            <h2>‚úÖ No vulnerabilities detected</h2>
            <p>Your code appears to be secure. Keep up the good work!</p>
        </div>
    ` : allVulnerabilities.map(({ file, vulnerabilities }) => `
        <div class="file-section">
            <div class="file-header" onclick="toggleSection(this)">
                <span>üìÑ ${file.split('/').pop()}</span>
                <span>${vulnerabilities.length} issue${vulnerabilities.length !== 1 ? 's' : ''}</span>
            </div>
            <div class="vulnerability-list collapsible expanded">
                ${vulnerabilities.map((vuln, index) => `
                    <div class="vulnerability-item">
                        <div class="vulnerability-header">
                            <span class="severity-badge ${vuln.severity}">${vuln.severity.toUpperCase()}</span>
                            <span>Line ${vuln.line}</span>
                            ${vuln.cwe ? `<span>üìã ${vuln.cwe}</span>` : ''}
                        </div>
                        <div class="vulnerability-message">
                            ${vuln.message}
                        </div>
                        <div class="vulnerability-details">
                            <span>Type: ${vuln.type}</span>
                            <span>Confidence: ${Math.round(vuln.confidence * 100)}%</span>
                        </div>
                        ${vuln.suggestion ? `
                            <div class="suggestion">
                                üí° <strong>Suggestion:</strong> ${vuln.suggestion}
                            </div>
                        ` : ''}
                        <div class="action-buttons">
                            <button onclick="openFile('${file}', ${vuln.line})">
                                View in Editor
                            </button>
                            <button onclick="requestFix('${file}', ${index})">
                                Generate Fix
                            </button>
                            <button class="secondary" onclick="ignoreSuggestion('${file}', ${index})">
                                Ignore
                            </button>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `).join('')}

    <script>
        const vscode = acquireVsCodeApi();
        const vulnerabilities = ${JSON.stringify(Array.from(this.vulnerabilities.entries()))};

        function toggleSection(header) {
            const list = header.nextElementSibling;
            list.classList.toggle('expanded');
        }

        function openFile(file, line) {
            vscode.postMessage({
                command: 'openFile',
                file: file,
                line: line
            });
        }

        function requestFix(file, index) {
            const fileVulns = vulnerabilities.find(([f]) => f === file);
            if (fileVulns) {
                const vuln = fileVulns[1][index];
                vscode.postMessage({
                    command: 'applyFix',
                    file: file,
                    vulnerability: vuln,
                    fix: vuln.suggestion || ''
                });
            }
        }

        function ignoreSuggestion(file, index) {
            const fileVulns = vulnerabilities.find(([f]) => f === file);
            if (fileVulns) {
                const vuln = fileVulns[1][index];
                vscode.postMessage({
                    command: 'ignoreSuggestion',
                    file: file,
                    vulnerability: vuln
                });
            }
        }
    </script>
</body>
</html>`;
    }

    private countBySeverity(severity: string): number {
        let count = 0;
        this.vulnerabilities.forEach(vulns => {
            count += vulns.filter(v => v.severity === severity).length;
        });
        return count;
    }

    public dispose() {
        if (this.panel) {
            this.panel.dispose();
        }
    }
}